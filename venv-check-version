#!/bin/bash

# venv-check-version
# This script checks whether a specified virtual environment is based 
# on the specified python version
# Return values are
# 0 - if versions match
# 1 - if versions mismatch
# 2 - if virtual envirnoment does not exist (also prints to stderr)
#
# If the specified python version is ommitted, the script returns 0 (or 2) and
# prints the python version number. Not recommended together with -v

usage() {
	echo "usage: $0 [-v] venv-name [py-version]"
	echo "With only venv-name, return the python version of this virtual environment."
	echo "With venv-nname and py-version, check that the virtual environment has the correct version."
}

echov() {
	[[ "$verbose" == "1" ]] && echo "$@"
}

if [[ "$1" == '-v' ]] || [[ "$1" == '--verbose' ]]; then
	verbose=1
	shift
fi

if [[ $# -lt 1 ]] || [[ $# -gt 3 ]]; then
	usage
	exit 99
fi


venvname="$1"
echov "venv-name:  $venvname"
if [[ $# -lt 2 ]]; then
	reqpyversion="<check>"
else
	reqpyversion="$2"
fi
echov "py-version: $reqpyversion"

# Set up pyenv and pyenv-virtualenv
echov "Checking for pyenv..."
if ! command -v pyenv 1>/dev/null 2>&1; then
	echo 'pyenv and pyenv-virtualenv are required for this script!' >&2
	echo 'Please see https://github.com/pyenv/pyenv and https://github.com/pyenv/pyenv-virtualenv' >&2
	exit 98
fi
echov "Activating pyenv..."
PYENV_VIRTUALENV_VERBOSE_ACTIVATE=
eval "$(pyenv init -)"
eval "$(pyenv virtualenv-init -)"

# Check if virtual environment exists:
echov -n "Checking if virtual environment $venvname exists ..."
case $(pyenv virtualenvs --bare | grep -c "$venvname") in
	0)	echov " does not exist!"
		echo "ERROR: $venvname does not exist" >&2
		exit 2
		;;
	1)	echov " exists and is a system venv"
		venvpyversion='system'
		;;
	2)	echov " exists and is a pyenv venv"
		echov -n "Getting Python version of $venvname ..."
		venvpyversion=$(pyenv virtualenvs --bare | grep "$venvname" | grep 'envs' | awk -F'/' '{ print $1 }')
		echov " $venvpyversion"
		;;
	*)  echo "The envorionment $venvname seems to exists in an odd way. Please check the output of 'pyenv virtualenvs'!'" >&2
		exit 97
		;;
esac

# Check if equal
if [[ "$reqpyversion" == "<check>" ]]; then
	echo $venvpyversion
	exit 0
else
	echov -n "Checking if <$venvpyversion> == <$reqpyversion> ... "
	if [[ "$venvpyversion" == "$reqpyversion" ]]; then
		echov "YES"
		exit 0
	else
		echov "NO"
		exit 1
	fi
fi