#!/bin/bash

# venv-setup
# This script sets up a virtual environment using a specified python version and
# fills it with the given requirements.

usage() {
	echo "usage: $0 [-vu] [-n venv-name] [-p py-version] [-r requirements.txt [-r req2.txt...]]"
	echo
	echo "If any of -np are omitted, they will be asked interactively."
	echo
	echo "-A|--reinstall-ask       Ask what to do if python versions mismatch (default)."
	echo "                         Pass twice to also ask on correct version."
	echo "-C|--clean-venv          Create a clean environment if existent. Equivalent to -R -d"
	echo "-d|--discard-packages    Discard Packages on reinstallation."
	echo "-h|--help                Show usage information."
	echo "-k|--keep-packages       Reinstall current packages if reinstalling with -y"
	echo "-K|--keep-packages-ask   Ask whether to reinstall packages."
	echo "-n|--venv-name NAME      Name of the virtual environment to create"
	echo "-N|--reinstall-no        Do not reinstall environment on wrong python version."
	echo "-p|--python-version VER  Version of python to be based on. Defaults to 'system'"
	echo "-r|--requirements FILE   Install the requirements from FILE with pip,"
	echo "                         can be given mutliple times. Defaults to none (empty venv)"
	echo "-R|--reinstall-always    Allways reinstall an existing environment."
	echo "-S|--sublime-lsp-deps    Add requirements for sublime text python LSP to the environment."
	echo "-u|--update-pip          Update pip to the latest version"
	echo "-v|--verbose             Increase verbosity (up to two times)"
	echo "-y|--reinstall-yes       Reinstall virtual environment on wrong python version."
}

echov() {
	[[ $verbose -ge 1 ]] && echo "$@"
}

echovv() {
	[[ $verbose -ge 2 ]] && echo "$@"
}

SCRIPT_PATH="$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" && pwd -P)"

### ARGUMENT PARSING

# Defaults
venvname=
pyversion='system'
reqfiles=()
verbose=0
updatepip=
reinstall="ask"
keeppackages="ask"
sublimelspdeps=
numa=0

while [ "$1" != "" ]; do
	case $1 in
		-A | --reinstall-ask )
			((numa++))
			[[ $numa -ge 2 ]] && reinstall="askask" || reinstall="ask"
			;;
		-C | --clean-venv )
			reinstall="always"
			keeppackages="no"
			;;
		-d | --discard-packages )
			keeppackages="no"
			;;
		-h | --help )
			usage
			exit 0
			;;
		-k | --keep-packages )
			keeppackages="yes"
			;;
		-K | --keep-packages-ask )
			keeppackages="ask"
			;;
		-n | --venv-name )
			shift
			venvname="$1"
			;;
		-N | --reinstall-no )
			reinstall="no"
			;;
		-p | --python-version )
			shift
			pyversion="$1"
			;;
		-r | --requirements )
			shift
			reqfiles+=( "-r $1" )
			;;
		-R | --reinstall-always )
			reinstall="always"
			;;
		-S | --sublime-lsp-deps )
			sublimelspdeps="1"
			;;
		-u | --update-pip )
			updatepip=1
			;;
		-v | --verbose )
			((verbose+=1))
			;;
		-vv )
			((verbose+=2))
			;;
		-y | --reinstall-yes )
			reinstall="yes"
			;;
		*)
			echo "Invalid argument '$1'" >&2
			usage
			exit 1
	esac
	shift
done

# Unset tmpreqfile, will be filled in case requirements have to be trasferred
tmpreqfile=

if [[ $verbose -ge 1 ]]; then
	verbosechar="-v"
else
	verbosechar=""
fi

# We want the LSP requirements last, therefore we add it here
if [[ "$sublimelspdeps" == "1" ]]; then
	echov "Adding Sublime Text local Python-LSP packages from '${SCRIPT_PATH}/requirements-sublime-lsp.txt'"
	reqfiles+=( "-r ${SCRIPT_PATH}/requirements-sublime-lsp.txt" )
fi

# Fill missing values interactively
if [[ "$venvname" == "" ]]; then
	echovv "No venv name available, query terminal interactively..."
	read -p "Please enter the name of the virtual environment: " -r
	if [[ "$REPLY" != "" ]]; then
		echovv "Query done."
		venvname="$REPLY"
	else
		echo "ERROR: A virtual environment name must be specified by using -n or interactively." >&2
		exit 1
	fi
fi

echov
echovv "SCRIPT_PATH:  '$SCRIPT_PATH'"
echovv
echov "venv-name:     $venvname"
echov "py-version:    $pyversion"
echov "requirements:  ${reqfiles[@]}"
echovv "reinstall:     $reinstall"
echovv "keep-packages: $keeppackages"
echovv "update-pip:    $updatepip"

### ACTIVATE PYENV
# Check for dependencies...
echovv "Checking for pyenv..."
if ! command -v pyenv 1>/dev/null 2>&1; then
	echo 'pyenv and pyenv-virtualenv are required for this script!' >&2
	echo 'Please see https://github.com/pyenv/pyenv and https://github.com/pyenv/pyenv-virtualenv' >&2
	exit 1
fi

echovv
echovv "Activating pyenv..."
PYENV_VIRTUALENV_VERBOSE_ACTIVATE=
eval "$(pyenv init -)"
eval "$(pyenv virtualenv-init -)"

### CREATE VIRTUAL ENVIRONMENT
echov "Checking if virtual environment $venvname already exists..."
if [[ $verbose -ge 2 ]]; then
	./venv-check-version -v "$venvname" "$pyversion"
elif [[ $erbose -ge 1 ]]; then
	./venv-check-version "$venvname" "$pyversion"
else
	./venv-check-version "$venvname" "$pyversion" 1>/dev/null 2>&1
fi
case $? in
	0)	echo "Virtual environment already exists and has correct python version."
		REPLY=
		if [[ $reinstall == "ask" ]]; then
			echovv "Asking user whether to reinstall annyway..."
			read -p "Reinstall anyway [y|N]? " -n 1 -r
			echo
		fi
		if [[ $reinstall == "always" ]] || [[ $REPLY =~ ^[Yy]$ ]]; then
			echov "Virtual environment forced to be reinstalled!"
			deleteenv='yes'
			createenv='yes'
		else
			deleteenv='no'
			createenv='no'
		fi
		;;
	1)  echo "Virtual environment already exists but is for a different python version $(./venv-tools/venv-check-version "$venvname")!"
		REPLY=
		if [[ $reinstall == "ask"* ]]; then
			echovv "Asking user whether to reinstall with correct python..."
			read -p "Reinstall with correct python version $pyversion [y|N]? " -n 1 -r
			echo
		fi
		if [[ $reinstall == "yes" ]] || [[ $REPLY =~ ^[Yy]$ ]]; then
			deleteenv='yes'
			createenv='yes'
		else
			echo "WARNING: Reinstallation disabled!"
			echo "The created virtual environment will have a non-matching python version."
			echo
			echo "The script will still try to install correct dependencies."
			echo "However, it is not guaranteed that it will work if the versions"
			echo "differ by substantial amount."
			deleteenv='no'
			createenv='no'
		fi
		;;
	2)	echov "Virtual environment does not exist and will be created."
		deleteenv='no'
		createenv='yes'
		;;
	*)	echo "ERROR: An error occured when calling venv-check-version!" >&2
		exit 2
esac

if [[ $deleteenv == 'yes' ]]; then
	REPLY=
	if [[ $keeppackages == "ask" ]]; then
		echovv "Asking user whether to reinstall present packages..."
		read -p "Reinstall present packages in new venv [y|N]? " -n 1 -r
		echo
	fi
	if [[ $keeppackages == "yes" ]] || [[ $REPLY =~ ^[Yy]$ ]]; then
		saveenv='yes'
	else
		saveenv='no'
	fi
fi

if [[ $saveenv == "yes" ]]; then
	tmpreqfile=$(mktemp /tmp/oldreqs-XXXXXXXXXX --suffix '.txt')
	echovv "Activate environment..."
	pyenv activate "$venvname"
	echovv "Freezing old packages to $tmpreqfile..."
	pip freeze > $tmpreqfile
fi

if [[ $deleteenv == 'yes' ]]; then
	echov "Deleting old virtual environment..."
	pyenv virtualenv-delete -f "$venvname"
fi

if [[ "$createenv" == "yes" ]]; then
	$SCRIPT_PATH/venv-create $verbosechar "$venvname" "$pyversion"
fi

##### POPULATE VIRTUAL ENVIRONMENT
echovv "Activate environment..."
pyenv activate "$venvname"

echov
echov "Updating pip..."
if [[ $updatepip != "" ]]; then
	python -m pip install --upgrade pip
fi

if [[ "$tmpreqfile" != "" ]]; then
	echov "Reinstalling frozen requirements with pip..."
	pip install -r $tmpreqfile
	rm -f $tmpreqfile
fi

if [[ "${#reqfiles}" -gt 0 ]]; then
	echov
	echov "Installing requirements with pip..."
	pip install ${reqfiles[@]}
fi